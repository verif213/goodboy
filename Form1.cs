using AWSParse; using Ookii.Dialogs.WinForms; using System.Diagnostics; namespace AWSParser { public partial class AWS_Parser_Form : Form { bool _r = false; public AWS_Parser_Form() { Load += z; InitializeComponent(); } async void z(object? a, EventArgs b) { bool l = await Updates.IsLatestVersion(); string u = await Updates.GetDownloadLink(); if (!l) { var r = MessageBox.Show("New version available!\nFor better performance we recommend updating", "Update", MessageBoxButtons.OKCancel, MessageBoxIcon.Information); if (r == DialogResult.OK) Process.Start(new ProcessStartInfo { FileName = u, UseShellExecute = true }); } } void x(object s, EventArgs e) { var d = new VistaFolderBrowserDialog { Description = "Choose folder with logs", UseDescriptionForTitle = true, ShowNewFolderButton = false }; if (d.ShowDialog() == DialogResult.OK) textBox1.Text = d.SelectedPath; } void y(object s, EventArgs e) { var d = new VistaFolderBrowserDialog { Description = "Choose folder to save", UseDescriptionForTitle = true, ShowNewFolderButton = false }; if (d.ShowDialog() == DialogResult.OK) textBox2.Text = d.SelectedPath; } async void q(object s, EventArgs e) { if (_r) return; if (string.IsNullOrEmpty(textBox1.Text)) { MessageBox.Show("You must choose folder with logs..."); return; } if (string.IsNullOrEmpty(textBox2.Text)) { MessageBox.Show("You must choose folder to save result..."); return; } if (!Directory.Exists(textBox1.Text) || !Directory.Exists(textBox2.Text)) { MessageBox.Show("One or both paths do not exist. Double check all paths."); return; } _r = true; button3.Enabled = false; try { await new Parser(textBox1.Text, textBox2.Text, progressBar1).RunAsync(); } finally { _r = false; button3.Enabled = true; } } void w(object s, EventArgs e) { } } }
